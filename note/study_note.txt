QUICK REFERENCE 

- REPL: Scala interpreter, an interactive shell  for  writing  Scala  expressions  and  programs.

- String interpolation:
	scala> val name = "Nilanjan"
		name: String = Nilanjan
	scala> s"My name $name"
		res0: String = My name Nilanjan

- val & var for define variable
	+ val:	Once  initialized  a val can’t  be  changed  or  reassigned  to  some other value (similar to final variables in Java)
	+ var: is reassignable;

- Placeholder character (_): has difference meaning depend on difference context
	1. assign default value for variable
		>	val f = (_ : Int) + (_ : Int)
			f(1, 2)								//Int = 3
	2. a placeholder for a parameter
		scala> val evenNumbers = List(2, 4, 6, 8, 10)
			evenNumbers: List[Int] = List(2, 4, 6, 8, 10)
		scala> evenNumbers.foldLeft(0) { (a: Int, b:Int) => a + b }
			res19: Int = 30
		scala> evenNumbers.foldLeft(0) { (a, b) => a + b } 
			res20: Int = 30
		scala> evenNumbers.foldLeft(0) { _ + _ }       //<= the point here 
			res21: Int = 30

- Variable initialize lazily (only for val):
	+ scala> lazy val forLater = someTimeConsumingOperation() 
				forLater: Unit = <lazy

- Cons method (::) : method defined in List

- Define function:
	1. With return type
		def welcome(name: String) :String = {"Exciting times ahead" + name }
	2. Without return type
		def welcome(name: String) {"Exciting times ahead" + name } //no equal sign (=) always return Unit (void)

- Parameterized types ([]): same like Java Generic (<>)		

- Closure: pass a function as a parameter to another function
- Function literals: Scala provides a shorthand way to create a function in which you write only the function body

- COLLECTION:
	1. List
		+ In Scala, List is immutable and makes functional-style programming easy
		+ Adding or removing an element from an immutable collection creates a new modified collection instance without modifying the existing one
		
		+ Add element at front of List with method (::)
			scala> val newList = 3 :: oldList
		+ Add element at end (:+)
		+ Remove element with filterNot() method
			scala> val afterDelete = newList.filterNot(_ == 3)
	2. Set
		+ scala.collection.immutable.Set
		+ scala.collection.mutable.Set
		+ Example
			var jetSet = Set("Boeing", "Airbus")  //instance immutable Set
			jetSet += "Lear"
	3. Map
		+ Example
			> val romanNumeral = Map( 1 -> "I", 2 -> "II", 3 -> "III", 4 -> "IV", 5 -> "V" )
			
			> val treasureMap = Map[Int, String]()
				| treasureMap += (1 -> "Go to island.")
				| treasureMap += (2 -> "Find big X on ground.")

- Singleton Object
	- Companion object: object shares the same name with the class, both defined in same source file
	- Companion class
	- A class and its companion object can access each other’s private members
	
- LITERAL is a way to write a constant value directly in code.
	
- Operator notation
	Ex: 
		s indexOf 'a' //indexOf is an operator

- Precedence	

- BUILD-IN CONTROL STRUCTURE
	+ (if) Expression
		Example:
			> if (!someCond) args(0) else "Another case"
			> println(if (!args.isEmpty) args(0) else "default.txt")
	+ (while) loop
		> while (condition) {}
		> do {} while(condition)
		
	+ (for) Loop:
		+ Use generator (<-) to  iterate through a collection: 
			> for(v <- varList)
				println(v)
		+ Range syntax
			> for (v <- 1 to 4)
				println(i + ",") // result: 1,2,3,4
			> for (v <- 1 util 4) 
				println(v + ",") //result: 1,2,3
		+ Filtering
				/*single condition for filtering*/
			> 	val filesHere = (new java.io.File(".")).listFiles 				//get all file in current folder
				for (file  <- filesHere if file.getName.endsWith(".scala"))		//loop filtered files that name end with ".scala"
					println(file)												//print file
				
				/*multiple condition for filtering*/
			> 	for (file <- filesHere
					if file.isFile
					if file.getName.endsWith(".scala")
				) println(file)
		+ Producing a new collection from iterator
			>	val fileArray = for (...) yield file				
	
	+ Exception handling with (try) expressions
		+ Throwing exception
			>	throw new RuntimeException("Number must be even")
		+ catch
			>	try {
				} catch {
					case ex: FileNotFoundException => //handle missing file
					case ex: IOException => //Handle other I/O error
				}
		+ finally
			>	try {
				} finally {
					file.close()
				}
		+ TIPS - NOTE:
			+ Avoid returning values from (finally) clauses => prevent side effect
	+ Match expressions (match) & (case)
		>	arg match {
				case "North" => println("north side")
				case "West" => println("west side")
				case _ => println("Wrong area")
			}

FUNCTION
	+ Local function: function is declared inside another function
	+ First class function
		>	(x : Int) => x + 1   //converts the thing on the left "x" to the right "x + 1"
		
		>	(x : Int) => {...}
		
		> 	val increase = (x : Int) => x + 1	//assign as value
			increase(10)
			
		>	lst.foreach((x : Int) => println(x))	
		
		>	lst.filter(x => x > 0)	//shorter way, auto cast
	
	+ Placeholder	
		>	lst.filter( _ > 0)		//use placeholder
		>	val f = (_: Int) + (_: Int)	
		
	+ Partially applied functions
		- replace an entire parameter list with an underscore (placeholder)
			>	lstNumber.foreach(println _)		//(_) is placeholder for entire list
		
			>	def sum(a : Int, b: Int, c : Int) = a + b + c
				
				val a = sum _		//a: (Int, Int, Int) => Int = <function3>				
				a(1,2,3)			// is short form of > a.apply(1,2,3)					
				
				val b = sum(1, _ : Int, 3)
				b(2)
	
+ CLOSURES
	>	var more = 1
	>	(x : Int) => x + more			//'open term' function
		- x: 		bound variable
		- more: 	free variable
	
	>	(x : Int) => x + more			//'closed term' function

	- The function value (the object) that’s created at runtime from this function literal is called a closure
		
+ SPECIAL FUNCTION CALL FORMS
	1. Repeated parameters
		>	def echo(args : String*)	//String* is actually Array[String]
			echo("first")
			echo("first", "second")
			
			val strs = Array("What", "the", "hell")
			echo(strs: _*)
		
	2. Named argument	
	3. Default parameters value	
	
- USEFUL TIPS
	+ Performance
	1. Use non-trivial computation once
	> def grep(pattern: String) =
		for (
			file <- filesHere
			if file.getName.endsWith(".scala");
			line <- fileLines(file)
			if line.trim.matches(pattern)  			// .trim is non-trivial computation
		) println(file +": "+ line.trim)
		grep(".*gcd.*")
	
	//Solution: Mid-stream variable bindings
	> def grep(pattern: String) =
		for (
			file <- filesHere
			if file.getName.endsWith(".scala");
			line <- fileLines(file)
			trimmed = line.trim
			if trimmed.matches(pattern)
		) println(file +": "+ trimmed)
	
				
	